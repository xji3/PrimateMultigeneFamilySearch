#Post.Lemur.Pairs <- Post.Lemur.Pairs[Post.Lemur.Pairs != "ENSG00000197520_ENSG00000151327"
#                                     & Post.Lemur.Pairs != "ENSG00000117480_ENSG00000165591"]
read.summary <- function(pairs, summary.path, model = "MG94", force = FALSE, clock = FALSE){
summary_mat <- NULL
if(force){
force.str = "Force_"
}else{
force.str = ""
}
if(clock){
clock.str = "clock"
}
else{
clock.str = "nonclock"
}
for (paralog in Post.Lemur.Pairs){
summary_file <- paste(summary.path, force.str, model, '_', paralog, "_", clock.str, "_summary.txt", sep = "")
if (file.exists(summary_file)){
all <- readLines(summary_file, n = -1)
col.names <- paralog
row.names <- strsplit(all[length(all)], ' ')[[1]][-1]
new.col   <- as.matrix(read.table(summary_file, row.names = row.names, col.names = col.names))
if (dim(new.col)[1] == 99){
summary_mat <- cbind(summary_mat, new.col)
}
}
}
return(summary_mata)
}
Post.Lemur.Summary <- read.summary(Post.Lemur.Pairs, summary.path, "MG94", force = FALSE, clock = FALSE)
read.summary <- function(pairs, summary.path, model = "MG94", force = FALSE, clock = FALSE){
summary_mat <- NULL
if(force){
force.str = "Force_"
}else{
force.str = ""
}
if(clock){
clock.str = "clock"
}
else{
clock.str = "nonclock"
}
for (paralog in Post.Lemur.Pairs){
summary_file <- paste(summary.path, force.str, model, '_', paralog, "_", clock.str, "_summary.txt", sep = "")
if (file.exists(summary_file)){
all <- readLines(summary_file, n = -1)
col.names <- paralog
row.names <- strsplit(all[length(all)], ' ')[[1]][-1]
new.col   <- as.matrix(read.table(summary_file, row.names = row.names, col.names = col.names))
if (dim(new.col)[1] == 99){
summary_mat <- cbind(summary_mat, new.col)
}
}
}
return(summary_mat)
}
Post.Lemur.Summary <- read.summary(Post.Lemur.Pairs, summary.path, "MG94", force = FALSE, clock = FALSE)
Force.Post.Lemur.Summary <- read.summary(Post.Lemur.Pairs, summary.path, "MG94", force = TRUE, clock = FALSE)
Post.Lemur.Summary <- read.summary(Post.Lemur.Pairs, summary.path, "MG94", force = FALSE, clock = FALSE)
Force.Post.Lemur.Summary <- read.summary(Post.Lemur.Pairs, summary.path, "MG94", force = TRUE, clock = FALSE)
finished.lemur.pairs <- intersect(colnames(Post.Lemur.Summary), colnames(Force.Post.Lemur.Summary))
Post.Lemur.Summary["ll", finished.lemur.pairs] - Force.Post.Lemur.Summary["ll", finished.lemur.pairs]
hist(Post.Lemur.Summary["ll", finished.lemur.pairs] - Force.Post.Lemur.Summary["ll", finished.lemur.pairs])
# Post.Lemur
Post.Lemur.Summary <- read.summary(Post.Lemur.Pairs, summary.path, "MG94", force = FALSE, clock = FALSE)
Force.Post.Lemur.Summary <- read.summary(Post.Lemur.Pairs, summary.path, "MG94", force = TRUE, clock = FALSE)
finished.lemur.pairs <- intersect(colnames(Post.Lemur.Summary), colnames(Force.Post.Lemur.Summary))
Post.Lemur.Summary["ll", finished.lemur.pairs] - Force.Post.Lemur.Summary["ll", finished.lemur.pairs]
hist(Post.Lemur.Summary["ll", finished.lemur.pairs] - Force.Post.Lemur.Summary["ll", finished.lemur.pairs])
# Post.Tarsier
Post.Tarsier.Summary <- read.summary(Post.Tarsier.Pairs, summary.path, "MG94", force = FALSE, clock = FALSE)
Force.Post.Tarsier.Summary <- read.summary(Post.Tarsier.Pairs, summary.path, "MG94", force = TRUE, clock = FALSE)
finished.Tarsier.pairs <- intersect(colnames(Post.Tarsier.Summary), colnames(Force.Post.Tarsier.Summary))
Post.Tarsier.Summary["ll", finished.Tarsier.pairs] - Force.Post.Tarsier.Summary["ll", finished.Tarsier.pairs]
hist(Post.Tarsier.Summary["ll", finished.Tarsier.pairs] - Force.Post.Tarsier.Summary["ll", finished.Tarsier.pairs])
Post.Tarsier.Pairs[1:5]
Post.Lemur.Pairs[1:5]
Post.Lemur.Summary <- read.summary(Post.Lemur.Pairs, summary.path, "MG94", force = FALSE, clock = FALSE)
Force.Post.Lemur.Summary <- read.summary(Post.Lemur.Pairs, summary.path, "MG94", force = TRUE, clock = FALSE)
finished.lemur.pairs <- intersect(colnames(Post.Lemur.Summary), colnames(Force.Post.Lemur.Summary))
Post.Lemur.Summary["ll", finished.lemur.pairs] - Force.Post.Lemur.Summary["ll", finished.lemur.pairs]
hist(Post.Lemur.Summary["ll", finished.lemur.pairs] - Force.Post.Lemur.Summary["ll", finished.lemur.pairs])
Post.Tarsier.Summary <- read.summary(Post.Tarsier.Pairs, summary.path, "MG94", force = FALSE, clock = FALSE)
Force.Post.Tarsier.Summary <- read.summary(Post.Tarsier.Pairs, summary.path, "MG94", force = TRUE, clock = FALSE)
finished.Tarsier.pairs <- intersect(colnames(Post.Tarsier.Summary), colnames(Force.Post.Tarsier.Summary))
Post.Tarsier.Summary["ll", finished.Tarsier.pairs] - Force.Post.Tarsier.Summary["ll", finished.Tarsier.pairs]
read.summary <- function(pairs, summary.path, model = "MG94", force = FALSE, clock = FALSE){
summary_mat <- NULL
if(force){
force.str = "Force_"
}else{
force.str = ""
}
if(clock){
clock.str = "clock"
}
else{
clock.str = "nonclock"
}
for (paralog in pairs){
summary_file <- paste(summary.path, force.str, model, '_', paralog, "_", clock.str, "_summary.txt", sep = "")
if (file.exists(summary_file)){
all <- readLines(summary_file, n = -1)
col.names <- paralog
row.names <- strsplit(all[length(all)], ' ')[[1]][-1]
new.col   <- as.matrix(read.table(summary_file, row.names = row.names, col.names = col.names))
if (dim(new.col)[1] == 99){
summary_mat <- cbind(summary_mat, new.col)
}
}
}
return(summary_mat)
}
Post.Lemur.Summary <- read.summary(Post.Lemur.Pairs, summary.path, "MG94", force = FALSE, clock = FALSE)
Force.Post.Lemur.Summary <- read.summary(Post.Lemur.Pairs, summary.path, "MG94", force = TRUE, clock = FALSE)
finished.lemur.pairs <- intersect(colnames(Post.Lemur.Summary), colnames(Force.Post.Lemur.Summary))
Post.Lemur.Summary["ll", finished.lemur.pairs] - Force.Post.Lemur.Summary["ll", finished.lemur.pairs]
hist(Post.Lemur.Summary["ll", finished.lemur.pairs] - Force.Post.Lemur.Summary["ll", finished.lemur.pairs])
# Post.Tarsier
Post.Tarsier.Summary <- read.summary(Post.Tarsier.Pairs, summary.path, "MG94", force = FALSE, clock = FALSE)
Force.Post.Tarsier.Summary <- read.summary(Post.Tarsier.Pairs, summary.path, "MG94", force = TRUE, clock = FALSE)
finished.Tarsier.pairs <- intersect(colnames(Post.Tarsier.Summary), colnames(Force.Post.Tarsier.Summary))
Post.Tarsier.Summary["ll", finished.Tarsier.pairs] - Force.Post.Tarsier.Summary["ll", finished.Tarsier.pairs]
hist(Post.Tarsier.Summary["ll", finished.Tarsier.pairs] - Force.Post.Tarsier.Summary["ll", finished.Tarsier.pairs])
```
Post.Tarsier.Summary <- read.summary(Post.Tarsier.Pairs, summary.path, "MG94", force = FALSE, clock = FALSE)
Force.Post.Tarsier.Summary <- read.summary(Post.Tarsier.Pairs, summary.path, "MG94", force = TRUE, clock = FALSE)
pairs = Post.Tarsier.Pairs
model = "MG94"
force = FALSE
clock = FALSE
force.str = ""
clock.str = "nonclock"
for (paralog in pairs){
summary_file <- paste(summary.path, force.str, model, '_', paralog, "_", clock.str, "_summary.txt", sep = "")
if (file.exists(summary_file)){
all <- readLines(summary_file, n = -1)
col.names <- paralog
row.names <- strsplit(all[length(all)], ' ')[[1]][-1]
new.col   <- as.matrix(read.table(summary_file, row.names = row.names, col.names = col.names))
if (dim(new.col)[1] == 99){
summary_mat <- cbind(summary_mat, new.col)
}
}
}
summary_mat <- NULL
for (paralog in pairs){
summary_file <- paste(summary.path, force.str, model, '_', paralog, "_", clock.str, "_summary.txt", sep = "")
if (file.exists(summary_file)){
all <- readLines(summary_file, n = -1)
col.names <- paralog
row.names <- strsplit(all[length(all)], ' ')[[1]][-1]
new.col   <- as.matrix(read.table(summary_file, row.names = row.names, col.names = col.names))
if (dim(new.col)[1] == 99){
summary_mat <- cbind(summary_mat, new.col)
}
}
}
summary_mat
return(summary_mat)
read.summary <- function(pairs, summary.path, model = "MG94", force = FALSE, clock = FALSE){
if(force){
force.str = "Force_"
}else{
force.str = ""
}
if(clock){
clock.str = "clock"
}
else{
clock.str = "nonclock"
}
summary_mat <- NULL
for (paralog in pairs){
summary_file <- paste(summary.path, force.str, model, '_', paralog, "_", clock.str, "_summary.txt", sep = "")
if (file.exists(summary_file)){
all <- readLines(summary_file, n = -1)
col.names <- paralog
row.names <- strsplit(all[length(all)], ' ')[[1]][-1]
new.col   <- as.matrix(read.table(summary_file, row.names = row.names, col.names = col.names))
if (dim(new.col)[1] == 99){
summary_mat <- cbind(summary_mat, new.col)
}
}
}
return(summary_mat)
}
Post.Tarsier.Summary <- read.summary(Post.Tarsier.Pairs, summary.path, "MG94", force = FALSE, clock = FALSE)
Force.Post.Tarsier.Summary <- read.summary(Post.Tarsier.Pairs, summary.path, "MG94", force = TRUE, clock = FALSE)
hist(Post.Tarsier.Summary["tau",])
# Chunk 1
rm(list=ls())  # clean up workspace
#human.paralog <- read.csv('~/Downloads/Ensembl84_Human_Paralogs.txt')
# show columns
#colnames(human.paralog)
# now see the quality of paralog mapping
#table(human.paralog[, "Human.paralogy.confidence..0.low..1.high."])
# Chunk 2
library(biomaRt)
# TO install
# source("https://bioconductor.org/biocLite.R")
# biocLite("biomaRt")
sg.dup.data <- read.table("~/Downloads/genomicSuperDups", header = TRUE,
stringsAsFactors = FALSE)
mart <- useMart("ensembl")
datasets <- listDatasets(mart)
mart <- useDataset("hsapiens_gene_ensembl",mart)
listFilters(mart)
listEnsembl()
# Now construct a list of ensembl ids that are located within segmental duplication regions
sg.gene.id.list <- "~/GitFolders/PrimateMultigeneFamilySearch/Segmental_Dup_Gene_ids.txt"
if (file.exists(sg.gene.id.list)){
sg.gene.ensembl.ids <- read.table(sg.gene.id.list)
}else{
sg.gene.ensembl.ids <- NULL
for (row.num in 1:dim(sg.dup.data)[1]){
dup1_genes <-
getBM(attributes=c('ensembl_gene_id','chromosome_name','start_position','end_position'),
filters = c('chromosome_name', "start", "end"),
values = list(substring(sg.dup.data[row.num, "chrom"], 4),
sg.dup.data[row.num, "chromStart"],
sg.dup.data[row.num, "chromEnd"]), mart = mart)
dup2_genes <-
getBM(attributes=c('ensembl_gene_id','chromosome_name','start_position','end_position'),
filters = c('chromosome_name', "start", "end"),
values = list(substring(sg.dup.data[row.num, "otherChrom"], 4),
sg.dup.data[row.num, "otherStart"],
sg.dup.data[row.num, "otherEnd"]), mart = mart)
if ( dim(dup1_genes)[1] != 0 & dim(dup2_genes)[1] != 0){
sg.gene.ensembl.ids <- unique(c(sg.gene.ensembl.ids, dup1_genes[, 1], dup2_genes[, 2]))
}
if (row.num %% 1000 == 0){
print(paste(toString(round(row.num / dim(sg.dup.data)[1]  * 100, 2)), "%", sep = ""))
}
}
write.table(sg.gene.ensembl.ids[substr(sg.gene.ensembl.ids, 1, 4) == "ENSG"],
sg.gene.id.list, sep = "/n",
row.names = FALSE, col.names = FALSE)
}
# Chunk 3
summary.path <- '~/GitFolders/PrimateMultigeneFamilySearch/Ensembl_GeneFamilies/Summary/'
Post.Lemur.list <- '~/GitFolders/PrimateMultigeneFamilySearch/Ensembl_GeneFamilies/Post_Lemur/Post_Lemur_List.txt'
Post.Tarsier.list <- '~/GitFolders/PrimateMultigeneFamilySearch/Ensembl_GeneFamilies/Post_Tarsier/Post_Tarsier_List.txt'
Post.NWM.list <- '~/GitFolders/PrimateMultigeneFamilySearch/Ensembl_GeneFamilies/Post_NWM/Post_NWM_List.txt'
Post.Lemur.Pairs <- read.table(Post.Lemur.list, stringsAsFactors = FALSE)[, 1]
Post.Tarsier.Pairs <- read.table(Post.Tarsier.list, stringsAsFactors = FALSE)[, 1]
Post.NWM.Pairs <- read.table(Post.NWM.list, stringsAsFactors = FALSE)[, 1]
#Post.Lemur.Pairs <- Post.Lemur.Pairs[Post.Lemur.Pairs != "ENSG00000197520_ENSG00000151327"
#                                     & Post.Lemur.Pairs != "ENSG00000117480_ENSG00000165591"]
read.summary <- function(pairs, summary.path, model = "MG94", force = FALSE, clock = FALSE){
if(force){
force.str = "Force_"
}else{
force.str = ""
}
if(clock){
clock.str = "clock"
}
else{
clock.str = "nonclock"
}
summary_mat <- NULL
for (paralog in pairs){
summary_file <- paste(summary.path, force.str, model, '_', paralog, "_", clock.str, "_summary.txt", sep = "")
if (file.exists(summary_file)){
all <- readLines(summary_file, n = -1)
col.names <- paralog
row.names <- strsplit(all[length(all)], ' ')[[1]][-1]
new.col   <- as.matrix(read.table(summary_file, row.names = row.names, col.names = col.names))
if (dim(new.col)[1] == 99){
summary_mat <- cbind(summary_mat, new.col)
}
}
}
return(summary_mat)
}
# Chunk 4
# Post.Lemur
Post.Lemur.Summary <- read.summary(Post.Lemur.Pairs, summary.path, "MG94", force = FALSE, clock = FALSE)
Force.Post.Lemur.Summary <- read.summary(Post.Lemur.Pairs, summary.path, "MG94", force = TRUE, clock = FALSE)
finished.lemur.pairs <- intersect(colnames(Post.Lemur.Summary), colnames(Force.Post.Lemur.Summary))
Post.Lemur.Summary["ll", finished.lemur.pairs] - Force.Post.Lemur.Summary["ll", finished.lemur.pairs]
hist(Post.Lemur.Summary["ll", finished.lemur.pairs] - Force.Post.Lemur.Summary["ll", finished.lemur.pairs])
# Post.Tarsier
Post.Tarsier.Summary <- read.summary(Post.Tarsier.Pairs, summary.path, "MG94", force = FALSE, clock = FALSE)
Force.Post.Tarsier.Summary <- read.summary(Post.Tarsier.Pairs, summary.path, "MG94", force = TRUE, clock = FALSE)
finished.Tarsier.pairs <- intersect(colnames(Post.Tarsier.Summary), colnames(Force.Post.Tarsier.Summary))
Post.Tarsier.Summary["ll", finished.Tarsier.pairs] - Force.Post.Tarsier.Summary["ll", finished.Tarsier.pairs]
hist(Post.Tarsier.Summary["ll", finished.Tarsier.pairs] - Force.Post.Tarsier.Summary["ll", finished.Tarsier.pairs])
Post.Tarsier.Summary <- read.summary(Post.Tarsier.Pairs, summary.path, "MG94", force = FALSE, clock = FALSE)
Force.Post.Tarsier.Summary <- read.summary(Post.Tarsier.Pairs, summary.path, "MG94", force = TRUE, clock = FALSE)
View(Post.Tarsier.Summary)
# Chunk 1
rm(list=ls())  # clean up workspace
#human.paralog <- read.csv('~/Downloads/Ensembl84_Human_Paralogs.txt')
# show columns
#colnames(human.paralog)
# now see the quality of paralog mapping
#table(human.paralog[, "Human.paralogy.confidence..0.low..1.high."])
# Chunk 2
library(biomaRt)
# TO install
# source("https://bioconductor.org/biocLite.R")
# biocLite("biomaRt")
sg.dup.data <- read.table("~/Downloads/genomicSuperDups", header = TRUE,
stringsAsFactors = FALSE)
mart <- useMart("ensembl")
datasets <- listDatasets(mart)
mart <- useDataset("hsapiens_gene_ensembl",mart)
listFilters(mart)
listEnsembl()
# Now construct a list of ensembl ids that are located within segmental duplication regions
sg.gene.id.list <- "~/GitFolders/PrimateMultigeneFamilySearch/Segmental_Dup_Gene_ids.txt"
if (file.exists(sg.gene.id.list)){
sg.gene.ensembl.ids <- read.table(sg.gene.id.list)
}else{
sg.gene.ensembl.ids <- NULL
for (row.num in 1:dim(sg.dup.data)[1]){
dup1_genes <-
getBM(attributes=c('ensembl_gene_id','chromosome_name','start_position','end_position'),
filters = c('chromosome_name', "start", "end"),
values = list(substring(sg.dup.data[row.num, "chrom"], 4),
sg.dup.data[row.num, "chromStart"],
sg.dup.data[row.num, "chromEnd"]), mart = mart)
dup2_genes <-
getBM(attributes=c('ensembl_gene_id','chromosome_name','start_position','end_position'),
filters = c('chromosome_name', "start", "end"),
values = list(substring(sg.dup.data[row.num, "otherChrom"], 4),
sg.dup.data[row.num, "otherStart"],
sg.dup.data[row.num, "otherEnd"]), mart = mart)
if ( dim(dup1_genes)[1] != 0 & dim(dup2_genes)[1] != 0){
sg.gene.ensembl.ids <- unique(c(sg.gene.ensembl.ids, dup1_genes[, 1], dup2_genes[, 2]))
}
if (row.num %% 1000 == 0){
print(paste(toString(round(row.num / dim(sg.dup.data)[1]  * 100, 2)), "%", sep = ""))
}
}
write.table(sg.gene.ensembl.ids[substr(sg.gene.ensembl.ids, 1, 4) == "ENSG"],
sg.gene.id.list, sep = "/n",
row.names = FALSE, col.names = FALSE)
}
# Chunk 3
summary.path <- '~/GitFolders/PrimateMultigeneFamilySearch/Ensembl_GeneFamilies/Summary/'
Post.Lemur.list <- '~/GitFolders/PrimateMultigeneFamilySearch/Ensembl_GeneFamilies/Post_Lemur/Post_Lemur_List.txt'
Post.Tarsier.list <- '~/GitFolders/PrimateMultigeneFamilySearch/Ensembl_GeneFamilies/Post_Tarsier/Post_Tarsier_List.txt'
Post.NWM.list <- '~/GitFolders/PrimateMultigeneFamilySearch/Ensembl_GeneFamilies/Post_NWM/Post_NWM_List.txt'
Post.Lemur.Pairs <- read.table(Post.Lemur.list, stringsAsFactors = FALSE)[, 1]
Post.Tarsier.Pairs <- read.table(Post.Tarsier.list, stringsAsFactors = FALSE)[, 1]
Post.NWM.Pairs <- read.table(Post.NWM.list, stringsAsFactors = FALSE)[, 1]
#Post.Lemur.Pairs <- Post.Lemur.Pairs[Post.Lemur.Pairs != "ENSG00000197520_ENSG00000151327"
#                                     & Post.Lemur.Pairs != "ENSG00000117480_ENSG00000165591"]
read.summary <- function(pairs, summary.path, model = "MG94", force = FALSE, clock = FALSE){
if(force){
force.str = "Force_"
}else{
force.str = ""
}
if(clock){
clock.str = "clock"
}
else{
clock.str = "nonclock"
}
summary_mat <- NULL
for (paralog in pairs){
summary_file <- paste(summary.path, force.str, model, '_', paralog, "_", clock.str, "_summary.txt", sep = "")
if (file.exists(summary_file)){
all <- readLines(summary_file, n = -1)
col.names <- paralog
row.names <- strsplit(all[length(all)], ' ')[[1]][-1]
new.col   <- as.matrix(read.table(summary_file, row.names = row.names, col.names = col.names))
if (dim(new.col)[1] == 99){
summary_mat <- cbind(summary_mat, new.col)
}
}
}
return(summary_mat)
}
# Chunk 4
# Post.Lemur
Post.Lemur.Summary <- read.summary(Post.Lemur.Pairs, summary.path, "MG94", force = FALSE, clock = FALSE)
Force.Post.Lemur.Summary <- read.summary(Post.Lemur.Pairs, summary.path, "MG94", force = TRUE, clock = FALSE)
finished.lemur.pairs <- intersect(colnames(Post.Lemur.Summary), colnames(Force.Post.Lemur.Summary))
Post.Lemur.Summary["ll", finished.lemur.pairs] - Force.Post.Lemur.Summary["ll", finished.lemur.pairs]
hist(Post.Lemur.Summary["ll", finished.lemur.pairs] - Force.Post.Lemur.Summary["ll", finished.lemur.pairs])
# Post.Tarsier
Post.Tarsier.Summary <- read.summary(Post.Tarsier.Pairs, summary.path, "MG94", force = FALSE, clock = FALSE)
Force.Post.Tarsier.Summary <- read.summary(Post.Tarsier.Pairs, summary.path, "MG94", force = TRUE, clock = FALSE)
finished.Tarsier.pairs <- intersect(colnames(Post.Tarsier.Summary), colnames(Force.Post.Tarsier.Summary))
Post.Tarsier.Summary["ll", finished.Tarsier.pairs] - Force.Post.Tarsier.Summary["ll", finished.Tarsier.pairs]
hist(Post.Tarsier.Summary["ll", finished.Tarsier.pairs] - Force.Post.Tarsier.Summary["ll", finished.Tarsier.pairs])
qchisq(0.95, 1)
sig.post.lemur.pairs <- colnames(Post.Lemur.Summary[, finished.Lemur.pairs])[Post.Lemur.Summary["ll", finished.Lemur.pairs] - Force.Post.Lemur.Summary["ll", finished.Lemur.pairs] > 3.84]
# Post.Lemur
Post.Lemur.Summary <- read.summary(Post.Lemur.Pairs, summary.path, "MG94", force = FALSE, clock = FALSE)
Force.Post.Lemur.Summary <- read.summary(Post.Lemur.Pairs, summary.path, "MG94", force = TRUE, clock = FALSE)
finished.Lemur.pairs <- intersect(colnames(Post.Lemur.Summary), colnames(Force.Post.Lemur.Summary))
Post.Lemur.Summary["ll", finished.Lemur.pairs] - Force.Post.Lemur.Summary["ll", finished.Lemur.pairs]
hist(Post.Lemur.Summary["ll", finished.Lemur.pairs] - Force.Post.Lemur.Summary["ll", finished.Lemur.pairs])
# Post.Tarsier
Post.Tarsier.Summary <- read.summary(Post.Tarsier.Pairs, summary.path, "MG94", force = FALSE, clock = FALSE)
Force.Post.Tarsier.Summary <- read.summary(Post.Tarsier.Pairs, summary.path, "MG94", force = TRUE, clock = FALSE)
finished.Tarsier.pairs <- intersect(colnames(Post.Tarsier.Summary), colnames(Force.Post.Tarsier.Summary))
Post.Tarsier.Summary["ll", finished.Tarsier.pairs] - Force.Post.Tarsier.Summary["ll", finished.Tarsier.pairs]
hist(Post.Tarsier.Summary["ll", finished.Tarsier.pairs] - Force.Post.Tarsier.Summary["ll", finished.Tarsier.pairs])
sig.post.lemur.pairs <- colnames(Post.Lemur.Summary[, finished.Lemur.pairs])[Post.Lemur.Summary["ll", finished.Lemur.pairs] - Force.Post.Lemur.Summary["ll", finished.Lemur.pairs] > 3.84]
sig.post.lemur.pairs <- colnames(Post.Lemur.Summary[, finished.Lemur.pairs])[Post.Lemur.Summary["ll", finished.Lemur.pairs] - Force.Post.Lemur.Summary["ll", finished.Lemur.pairs] > 3.84]
sig.post.lemur.pairs
sig.post.lemur.pairs <- colnames(Post.Lemur.Summary[, finished.Lemur.pairs])[Post.Lemur.Summary["ll", finished.Lemur.pairs] - Force.Post.Lemur.Summary["ll", finished.Lemur.pairs] > 3.84]
sig.post.tarsier.pairs <- colnames(Post.tarsier.Summary[, finished.tarsier.pairs])[Post.tarsier.Summary["ll", finished.tarsier.pairs] - Force.Post.tarsier.Summary["ll", finished.tarsier.pairs] > 3.84]
sig.post.lemur.pairs <- colnames(Post.Lemur.Summary[, finished.Lemur.pairs])[Post.Lemur.Summary["ll", finished.Lemur.pairs] - Force.Post.Lemur.Summary["ll", finished.Lemur.pairs] > 3.84]
sig.post.tarsier.pairs <- colnames(Post.Tarsier.Summary[, finished.Tarsier.pairs])[Post.Tarsier.Summary["ll", finished.Tarsier.pairs] - Force.Post.Tarsier.Summary["ll", finished.Tarsier.pairs] > 3.84]
sig.post.tarsier.pairs
sig.summary.lemur <- cbind(Post.Lemur.Summary["tau", sig.post.lemur.pairs],
Post.Lemur.Summary["ll", sig.post.lemur.pairs] - Force.Post.Lemur.Summary["ll", sig.post.lemur.pairs])
sig.summary.lemur
View(Post.Lemur.Summary)
dim(Post.Lemur.Summary)
rownames(Post.Lemur.Summary)[69:99]
rownames(Post.Lemur.Summary)[45:99]
rownames(Post.Lemur.Summary)[46:99]
num.branch <- (dim(Post.Lemur.Summary)[1] - 9) / 5
num.branch
rownames(Post.Lemur.Summary)[]
rownames(Post.Lemur.Summary)[(dim(Post.Lemur.Summary)[1] - 3 * num.branch + 1) : (dim(Post.Lemur.Summary)[1] - num.branch)]
sum(Post.Lemur.Summary[(dim(Post.Lemur.Summary)[1] - 3 * num.branch + 1) : (dim(Post.Lemur.Summary)[1] - num.branch)]) /
sum(Post.Lemur.Summary[(dim(Post.Lemur.Summary)[1] - num.branch + 1) : dim(Post.Lemur.Summary)[1]])
colSums(Post.Lemur.Summary[(dim(Post.Lemur.Summary)[1] - 3 * num.branch + 1) : (dim(Post.Lemur.Summary)[1] - num.branch), ]) /
colSums(Post.Lemur.Summary[(dim(Post.Lemur.Summary)[1] - num.branch + 1) : dim(Post.Lemur.Summary)[1], ])
colSums(Post.Lemur.Summary[(dim(Post.Lemur.Summary)[1] - 3 * num.branch + 1) : (dim(Post.Lemur.Summary)[1] - num.branch), sig.post.lemur.pairs]) /
colSums(Post.Lemur.Summary[(dim(Post.Lemur.Summary)[1] - num.branch + 1) : dim(Post.Lemur.Summary)[1], sig.post.lemur.pairs])
sig.summary.lemur <- cbind(Post.Lemur.Summary["tau", sig.post.lemur.pairs],
Post.Lemur.Summary["ll", sig.post.lemur.pairs] - Force.Post.Lemur.Summary["ll", sig.post.lemur.pairs],
(colSums(Post.Lemur.Summary[(dim(Post.Lemur.Summary)[1] - 3 * num.branch + 1) : (dim(Post.Lemur.Summary)[1] - num.branch), sig.post.lemur.pairs]) /
colSums(Post.Lemur.Summary[(dim(Post.Lemur.Summary)[1] - num.branch + 1) : dim(Post.Lemur.Summary)[1], sig.post.lemur.pairs])))
sig.summary.lemur.colnames <- c("tau", "lnL increase", "%IGC")
sig.summary.lemur
rownames(sig.summary.lemur) <- sig.summary.lemur.colnames
colnames(sig.summary.lemur) <- sig.summary.lemur.colnames
sig.summary.lemur
sig.post.lemur.pairs <- colnames(Post.Lemur.Summary[, finished.Lemur.pairs])[Post.Lemur.Summary["ll", finished.Lemur.pairs] - Force.Post.Lemur.Summary["ll", finished.Lemur.pairs] > 3.84]
sig.post.tarsier.pairs <- colnames(Post.Tarsier.Summary[, finished.Tarsier.pairs])[Post.Tarsier.Summary["ll", finished.Tarsier.pairs] - Force.Post.Tarsier.Summary["ll", finished.Tarsier.pairs] > 3.84]
num.branch.lemur <- (dim(Post.Lemur.Summary)[1] - 9) / 5
sig.summary.lemur <- cbind(Post.Lemur.Summary["tau", sig.post.lemur.pairs],
Post.Lemur.Summary["ll", sig.post.lemur.pairs] - Force.Post.Lemur.Summary["ll", sig.post.lemur.pairs],
(colSums(Post.Lemur.Summary[(dim(Post.Lemur.Summary)[1] - 3 * num.branch.lemur + 1) : (dim(Post.Lemur.Summary)[1] - num.branch.lemur), sig.post.lemur.pairs]) /
colSums(Post.Lemur.Summary[(dim(Post.Lemur.Summary)[1] - num.branch.lemur + 1) : dim(Post.Lemur.Summary)[1], sig.post.lemur.pairs])))
sig.summary.lemur.colnames <- c("tau", "lnL increase", "%IGC")
colnames(sig.summary.lemur) <- sig.summary.lemur.colnames
sig.summary.lemur
print(sig.summary.lemur)
print(sig.summary.tarsier)
num.branch.tarsier <- (dim(Post.Tarsier.Summary)[1] - 9) / 5
sig.summary.tarsier <- cbind(Post.Tarsier.Summary["tau", sig.post.tarsier.pairs],
Post.Tarsier.Summary["ll", sig.post.tarsier.pairs] - Force.Post.Tarsier.Summary["ll", sig.post.tarsier.pairs],
(colSums(Post.Tarsier.Summary[(dim(Post.Tarsier.Summary)[1] - 3 * num.branch.tarsier + 1) : (dim(Post.Tarsier.Summary)[1] - num.branch.tarsier), sig.post.tarsier.pairs]) /
colSums(Post.Tarsier.Summary[(dim(Post.Tarsier.Summary)[1] - num.branch.tarsier + 1) : dim(Post.Tarsier.Summary)[1], sig.post.tarsier.pairs])))
sig.summary.tarsier.colnames <- c("tau", "lnL increase", "%IGC")
colnames(sig.summary.tarsier) <- sig.summary.tarsier.colnames
print(sig.summary.tarsier)
sig.post.tarsier.pairs
Post.Tarsier.Summary["tau", sig.post.tarsier.pairs]
Post.Tarsier.Summary["ll", sig.post.tarsier.pairs] - Force.Post.Tarsier.Summary["ll", sig.post.tarsier.pairs]
(colSums(Post.Tarsier.Summary[(dim(Post.Tarsier.Summary)[1] - 3 * num.branch.tarsier + 1) : (dim(Post.Tarsier.Summary)[1] - num.branch.tarsier), sig.post.tarsier.pairs]) /
colSums(Post.Tarsier.Summary[(dim(Post.Tarsier.Summary)[1] - num.branch.tarsier + 1) : dim(Post.Tarsier.Summary)[1], sig.post.tarsier.pairs]))
Post.Tarsier.Summary[(dim(Post.Tarsier.Summary)[1] - 3 * num.branch.tarsier + 1) : (dim(Post.Tarsier.Summary)[1] - num.branch.tarsier), sig.post.tarsier.pairs]
colSums(Post.Tarsier.Summary[(dim(Post.Tarsier.Summary)[1] - 3 * num.branch.tarsier + 1) : (dim(Post.Tarsier.Summary)[1] - num.branch.tarsier), sig.post.tarsier.pairs])
if (length(sig.post.tarsier.pairs) > 1){
sig.summary.tarsier <- cbind(Post.Tarsier.Summary["tau", sig.post.tarsier.pairs],
Post.Tarsier.Summary["ll", sig.post.tarsier.pairs] - Force.Post.Tarsier.Summary["ll", sig.post.tarsier.pairs],
(colSums(Post.Tarsier.Summary[(dim(Post.Tarsier.Summary)[1] - 3 * num.branch.tarsier + 1) : (dim(Post.Tarsier.Summary)[1] - num.branch.tarsier), sig.post.tarsier.pairs]) /
colSums(Post.Tarsier.Summary[(dim(Post.Tarsier.Summary)[1] - num.branch.tarsier + 1) : dim(Post.Tarsier.Summary)[1], sig.post.tarsier.pairs]))) }
else{
sig.summary.tarsier <- c(Post.Tarsier.Summary["tau", sig.post.tarsier.pairs],
Post.Tarsier.Summary["ll", sig.post.tarsier.pairs] - Force.Post.Tarsier.Summary["ll", sig.post.tarsier.pairs],
(sum(Post.Tarsier.Summary[(dim(Post.Tarsier.Summary)[1] - 3 * num.branch.tarsier + 1) : (dim(Post.Tarsier.Summary)[1] - num.branch.tarsier), sig.post.tarsier.pairs]) /
num.branch.tarsier <- (dim(Post.Tarsier.Summary)[1] - 9) / 5
if (length(sig.post.tarsier.pairs) > 1){
sig.summary.tarsier <- cbind(Post.Tarsier.Summary["tau", sig.post.tarsier.pairs],
Post.Tarsier.Summary["ll", sig.post.tarsier.pairs] - Force.Post.Tarsier.Summary["ll", sig.post.tarsier.pairs],
(colSums(Post.Tarsier.Summary[(dim(Post.Tarsier.Summary)[1] - 3 * num.branch.tarsier + 1) : (dim(Post.Tarsier.Summary)[1] - num.branch.tarsier), sig.post.tarsier.pairs]) /
colSums(Post.Tarsier.Summary[(dim(Post.Tarsier.Summary)[1] - num.branch.tarsier + 1) : dim(Post.Tarsier.Summary)[1], sig.post.tarsier.pairs])))
num.branch.tarsier <- (dim(Post.Tarsier.Summary)[1] - 9) / 5
if (length(sig.post.tarsier.pairs) > 1){
sig.summary.tarsier <- cbind(Post.Tarsier.Summary["tau", sig.post.tarsier.pairs],
Post.Tarsier.Summary["ll", sig.post.tarsier.pairs] - Force.Post.Tarsier.Summary["ll", sig.post.tarsier.pairs],
(colSums(Post.Tarsier.Summary[(dim(Post.Tarsier.Summary)[1] - 3 * num.branch.tarsier + 1) : (dim(Post.Tarsier.Summary)[1] - num.branch.tarsier), sig.post.tarsier.pairs]) /
colSums(Post.Tarsier.Summary[(dim(Post.Tarsier.Summary)[1] - num.branch.tarsier + 1) : dim(Post.Tarsier.Summary)[1], sig.post.tarsier.pairs])))
}else{
sig.summary.tarsier <- c(Post.Tarsier.Summary["tau", sig.post.tarsier.pairs],
Post.Tarsier.Summary["ll", sig.post.tarsier.pairs] - Force.Post.Tarsier.Summary["ll", sig.post.tarsier.pairs],
(sum(Post.Tarsier.Summary[(dim(Post.Tarsier.Summary)[1] - 3 * num.branch.tarsier + 1) : (dim(Post.Tarsier.Summary)[1] - num.branch.tarsier), sig.post.tarsier.pairs]) /
sum(Post.Tarsier.Summary[(dim(Post.Tarsier.Summary)[1] - num.branch.tarsier + 1) : dim(Post.Tarsier.Summary)[1], sig.post.tarsier.pairs])))
}
sig.summary.tarsier.colnames <- c("tau", "lnL increase", "%IGC")
colnames(sig.summary.tarsier) <- sig.summary.tarsier.colnames
num.branch.tarsier <- (dim(Post.Tarsier.Summary)[1] - 9) / 5
if (length(sig.post.tarsier.pairs) > 1){
sig.summary.tarsier <- cbind(Post.Tarsier.Summary["tau", sig.post.tarsier.pairs],
Post.Tarsier.Summary["ll", sig.post.tarsier.pairs] - Force.Post.Tarsier.Summary["ll", sig.post.tarsier.pairs],
(colSums(Post.Tarsier.Summary[(dim(Post.Tarsier.Summary)[1] - 3 * num.branch.tarsier + 1) : (dim(Post.Tarsier.Summary)[1] - num.branch.tarsier), sig.post.tarsier.pairs]) /
colSums(Post.Tarsier.Summary[(dim(Post.Tarsier.Summary)[1] - num.branch.tarsier + 1) : dim(Post.Tarsier.Summary)[1], sig.post.tarsier.pairs])))
sig.summary.tarsier.colnames <- c("tau", "lnL increase", "%IGC")
colnames(sig.summary.tarsier) <- sig.summary.tarsier.colnames
}else{
sig.summary.tarsier <- c(Post.Tarsier.Summary["tau", sig.post.tarsier.pairs],
Post.Tarsier.Summary["ll", sig.post.tarsier.pairs] - Force.Post.Tarsier.Summary["ll", sig.post.tarsier.pairs],
(sum(Post.Tarsier.Summary[(dim(Post.Tarsier.Summary)[1] - 3 * num.branch.tarsier + 1) : (dim(Post.Tarsier.Summary)[1] - num.branch.tarsier), sig.post.tarsier.pairs]) /
sum(Post.Tarsier.Summary[(dim(Post.Tarsier.Summary)[1] - num.branch.tarsier + 1) : dim(Post.Tarsier.Summary)[1], sig.post.tarsier.pairs])))
}
print(sig.summary.tarsier)
